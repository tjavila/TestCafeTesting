"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFailRequest = exports.safeContinueRequest = exports.safeFulfillRequest = exports.safeContinueResponse = void 0;
const debug_loggers_1 = require("../../utils/debug-loggers");
const cdp_1 = require("../utils/cdp");
const INVALID_INTERCEPTED_RESPONSE_ERROR_MSG = 'Invalid InterceptionId.';
// In some cases (a request was aborted, any page that initiated the request doesn't exist, etc.)
// Chrome Debug Protocol doesn't allow to continue request pipeline
// and raises the "Invalid InterceptionId" error.
// We use the simplest way to fix it - omit such an error.
async function connectionResetGuard(handleRequestFn, handleErrorFn) {
    try {
        await handleRequestFn();
    }
    catch (err) {
        if (err.message === INVALID_INTERCEPTED_RESPONSE_ERROR_MSG)
            return;
        handleErrorFn(err);
        throw err;
    }
}
async function safeContinueResponse(client, data, sessionId) {
    const isPausedEvent = (0, cdp_1.isRequestPausedEvent)(data);
    await connectionResetGuard(async () => {
        const param = isPausedEvent
            ? { requestId: data.requestId }
            : data;
        // @ts-ignore
        await client.Fetch.continueResponse(param, sessionId);
    }, err => {
        const formatter = isPausedEvent ? '%r' : '%s';
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.continueResponse. Unhandled error %s during processing ${formatter}`, err, data);
    });
}
exports.safeContinueResponse = safeContinueResponse;
async function safeFulfillRequest(client, fulfillInfo, sessionId) {
    await connectionResetGuard(async () => {
        // @ts-ignore
        await client.Fetch.fulfillRequest(fulfillInfo, sessionId);
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.fulfillRequest. Unhandled error %s during processing %s`, err, fulfillInfo.requestId);
    });
}
exports.safeFulfillRequest = safeFulfillRequest;
async function safeContinueRequest(client, event, sessionId, continueRequestArgs) {
    const { postData, method, url, headers } = continueRequestArgs || {};
    await connectionResetGuard(async () => {
        // @ts-ignore
        await client.Fetch.continueRequest({ requestId: event.requestId, postData, method, url, headers }, sessionId);
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.continueRequest. Unhandled error %s during processing %r`, err, event);
    });
}
exports.safeContinueRequest = safeContinueRequest;
async function safeFailRequest(client, event, errorReason = 'Aborted') {
    await connectionResetGuard(async () => {
        await client.Fetch.failRequest({
            requestId: event.requestId,
            errorReason,
        });
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.failRequest. Unhandled error %s during processing %s`, err, event.requestId);
    });
}
exports.safeFailRequest = safeFailRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FmZS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF0aXZlLWF1dG9tYXRpb24vcmVxdWVzdC1waXBlbGluZS9zYWZlLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2REFBa0U7QUFNbEUsc0NBQW9EO0FBR3BELE1BQU0sc0NBQXNDLEdBQUcseUJBQXlCLENBQUM7QUFFekUsaUdBQWlHO0FBQ2pHLG1FQUFtRTtBQUNuRSxpREFBaUQ7QUFDakQsMERBQTBEO0FBRTFELEtBQUssVUFBVSxvQkFBb0IsQ0FBRSxlQUFvQyxFQUFFLGFBQWlDO0lBQ3hHLElBQUk7UUFDQSxNQUFNLGVBQWUsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxHQUFRLEVBQUU7UUFDYixJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssc0NBQXNDO1lBQ3RELE9BQU87UUFFWCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkIsTUFBTSxHQUFHLENBQUM7S0FDYjtBQUNMLENBQUM7QUFFTSxLQUFLLFVBQVUsb0JBQW9CLENBQUUsTUFBbUIsRUFBRSxJQUFrRCxFQUFFLFNBQW9CO0lBQ3JJLE1BQU0sYUFBYSxHQUFHLElBQUEsMEJBQW9CLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFFakQsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxNQUFNLEtBQUssR0FBRyxhQUFhO1lBQ3ZCLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFWCxhQUFhO1FBQ2IsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDTCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRTlDLElBQUEscUNBQXFCLEVBQUMsZ0VBQWdFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsSCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFmRCxvREFlQztBQUVNLEtBQUssVUFBVSxrQkFBa0IsQ0FBRSxNQUFtQixFQUFFLFdBQWtDLEVBQUUsU0FBb0I7SUFDbkgsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxhQUFhO1FBQ2IsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ0wsSUFBQSxxQ0FBcUIsRUFBQywrREFBK0QsRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZILENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVBELGdEQU9DO0FBRU0sS0FBSyxVQUFVLG1CQUFtQixDQUFFLE1BQW1CLEVBQUUsS0FBeUIsRUFBRSxTQUFvQixFQUFFLG1CQUF5QztJQUN0SixNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsbUJBQW1CLElBQUksRUFBRSxDQUFDO0lBRXJFLE1BQU0sb0JBQW9CLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEMsYUFBYTtRQUNiLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsSCxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDTCxJQUFBLHFDQUFxQixFQUFDLGdFQUFnRSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFURCxrREFTQztBQUVNLEtBQUssVUFBVSxlQUFlLENBQUUsTUFBbUIsRUFBRSxLQUF5QixFQUFFLGNBQTJCLFNBQVM7SUFDdkgsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXO1NBQ2QsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ0wsSUFBQSxxQ0FBcUIsRUFBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlHLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVRELDBDQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2xBcGkgfSBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSc7XG5pbXBvcnQgeyByZXF1ZXN0UGlwZWxpbmVMb2dnZXIgfSBmcm9tICcuLi8uLi91dGlscy9kZWJ1Zy1sb2dnZXJzJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgUmVxdWVzdFBhdXNlZEV2ZW50ID0gUHJvdG9jb2wuRmV0Y2guUmVxdWVzdFBhdXNlZEV2ZW50O1xuaW1wb3J0IEZ1bGZpbGxSZXF1ZXN0UmVxdWVzdCA9IFByb3RvY29sLkZldGNoLkZ1bGZpbGxSZXF1ZXN0UmVxdWVzdDtcbmltcG9ydCBDb250aW51ZVJlc3BvbnNlUmVxdWVzdCA9IFByb3RvY29sLkZldGNoLkNvbnRpbnVlUmVzcG9uc2VSZXF1ZXN0O1xuaW1wb3J0IEVycm9yUmVhc29uID0gUHJvdG9jb2wuTmV0d29yay5FcnJvclJlYXNvbjtcbmltcG9ydCB7IGlzUmVxdWVzdFBhdXNlZEV2ZW50IH0gZnJvbSAnLi4vdXRpbHMvY2RwJztcbmltcG9ydCB7IENvbnRpbnVlUmVxdWVzdEFyZ3MsIFNlc3Npb25JZCB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgSU5WQUxJRF9JTlRFUkNFUFRFRF9SRVNQT05TRV9FUlJPUl9NU0cgPSAnSW52YWxpZCBJbnRlcmNlcHRpb25JZC4nO1xuXG4vLyBJbiBzb21lIGNhc2VzIChhIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGFueSBwYWdlIHRoYXQgaW5pdGlhdGVkIHRoZSByZXF1ZXN0IGRvZXNuJ3QgZXhpc3QsIGV0Yy4pXG4vLyBDaHJvbWUgRGVidWcgUHJvdG9jb2wgZG9lc24ndCBhbGxvdyB0byBjb250aW51ZSByZXF1ZXN0IHBpcGVsaW5lXG4vLyBhbmQgcmFpc2VzIHRoZSBcIkludmFsaWQgSW50ZXJjZXB0aW9uSWRcIiBlcnJvci5cbi8vIFdlIHVzZSB0aGUgc2ltcGxlc3Qgd2F5IHRvIGZpeCBpdCAtIG9taXQgc3VjaCBhbiBlcnJvci5cblxuYXN5bmMgZnVuY3Rpb24gY29ubmVjdGlvblJlc2V0R3VhcmQgKGhhbmRsZVJlcXVlc3RGbjogKCkgPT4gUHJvbWlzZTx2b2lkPiwgaGFuZGxlRXJyb3JGbjogKGVycjogYW55KSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgaGFuZGxlUmVxdWVzdEZuKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09IElOVkFMSURfSU5URVJDRVBURURfUkVTUE9OU0VfRVJST1JfTVNHKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGhhbmRsZUVycm9yRm4oZXJyKTtcblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUNvbnRpbnVlUmVzcG9uc2UgKGNsaWVudDogUHJvdG9jb2xBcGksIGRhdGE6IFJlcXVlc3RQYXVzZWRFdmVudCB8IENvbnRpbnVlUmVzcG9uc2VSZXF1ZXN0LCBzZXNzaW9uSWQ6IFNlc3Npb25JZCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlzUGF1c2VkRXZlbnQgPSBpc1JlcXVlc3RQYXVzZWRFdmVudChkYXRhKTtcblxuICAgIGF3YWl0IGNvbm5lY3Rpb25SZXNldEd1YXJkKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW0gPSBpc1BhdXNlZEV2ZW50XG4gICAgICAgICAgICA/IHsgcmVxdWVzdElkOiBkYXRhLnJlcXVlc3RJZCB9XG4gICAgICAgICAgICA6IGRhdGE7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guY29udGludWVSZXNwb25zZShwYXJhbSwgc2Vzc2lvbklkKTtcbiAgICB9LCBlcnIgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBpc1BhdXNlZEV2ZW50ID8gJyVyJyA6ICclcyc7XG5cbiAgICAgICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyKGBGZXRjaC5jb250aW51ZVJlc3BvbnNlLiBVbmhhbmRsZWQgZXJyb3IgJXMgZHVyaW5nIHByb2Nlc3NpbmcgJHtmb3JtYXR0ZXJ9YCwgZXJyLCBkYXRhKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVGdWxmaWxsUmVxdWVzdCAoY2xpZW50OiBQcm90b2NvbEFwaSwgZnVsZmlsbEluZm86IEZ1bGZpbGxSZXF1ZXN0UmVxdWVzdCwgc2Vzc2lvbklkOiBTZXNzaW9uSWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjb25uZWN0aW9uUmVzZXRHdWFyZChhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYXdhaXQgY2xpZW50LkZldGNoLmZ1bGZpbGxSZXF1ZXN0KGZ1bGZpbGxJbmZvLCBzZXNzaW9uSWQpO1xuICAgIH0sIGVyciA9PiB7XG4gICAgICAgIHJlcXVlc3RQaXBlbGluZUxvZ2dlcihgRmV0Y2guZnVsZmlsbFJlcXVlc3QuIFVuaGFuZGxlZCBlcnJvciAlcyBkdXJpbmcgcHJvY2Vzc2luZyAlc2AsIGVyciwgZnVsZmlsbEluZm8ucmVxdWVzdElkKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVDb250aW51ZVJlcXVlc3QgKGNsaWVudDogUHJvdG9jb2xBcGksIGV2ZW50OiBSZXF1ZXN0UGF1c2VkRXZlbnQsIHNlc3Npb25JZDogU2Vzc2lvbklkLCBjb250aW51ZVJlcXVlc3RBcmdzPzogQ29udGludWVSZXF1ZXN0QXJncyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgcG9zdERhdGEsIG1ldGhvZCwgdXJsLCBoZWFkZXJzIH0gPSBjb250aW51ZVJlcXVlc3RBcmdzIHx8IHt9O1xuXG4gICAgYXdhaXQgY29ubmVjdGlvblJlc2V0R3VhcmQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGF3YWl0IGNsaWVudC5GZXRjaC5jb250aW51ZVJlcXVlc3QoeyByZXF1ZXN0SWQ6IGV2ZW50LnJlcXVlc3RJZCwgcG9zdERhdGEsIG1ldGhvZCwgdXJsLCBoZWFkZXJzIH0sIHNlc3Npb25JZCk7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyKGBGZXRjaC5jb250aW51ZVJlcXVlc3QuIFVuaGFuZGxlZCBlcnJvciAlcyBkdXJpbmcgcHJvY2Vzc2luZyAlcmAsIGVyciwgZXZlbnQpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUZhaWxSZXF1ZXN0IChjbGllbnQ6IFByb3RvY29sQXBpLCBldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50LCBlcnJvclJlYXNvbjogRXJyb3JSZWFzb24gPSAnQWJvcnRlZCcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjb25uZWN0aW9uUmVzZXRHdWFyZChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5GZXRjaC5mYWlsUmVxdWVzdCh7XG4gICAgICAgICAgICByZXF1ZXN0SWQ6IGV2ZW50LnJlcXVlc3RJZCxcbiAgICAgICAgICAgIGVycm9yUmVhc29uLFxuICAgICAgICB9KTtcbiAgICB9LCBlcnIgPT4ge1xuICAgICAgICByZXF1ZXN0UGlwZWxpbmVMb2dnZXIoYEZldGNoLmZhaWxSZXF1ZXN0LiBVbmhhbmRsZWQgZXJyb3IgJXMgZHVyaW5nIHByb2Nlc3NpbmcgJXNgLCBlcnIsIGV2ZW50LnJlcXVlc3RJZCk7XG4gICAgfSk7XG59XG4iXX0=