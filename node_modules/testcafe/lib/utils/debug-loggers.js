"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reporterLogger = exports.testRunControllerLogger = exports.requestPipelineContextLogger = exports.requestPipelineOtherRequestLogger = exports.requestPipelineServiceRequestLogger = exports.requestPipelineInternalRequestLogger = exports.requestPipelineMockLogger = exports.requestHooksEventProviderLogger = exports.chromeBrowserProviderLogger = exports.resourceInjectorLogger = exports.requestPipelineLogger = exports.nativeAutomationLogger = void 0;
const debug_1 = __importDefault(require("debug"));
const testcafeLogger = (0, debug_1.default)('testcafe');
const nativeAutomationLogger = testcafeLogger.extend('native-automation');
exports.nativeAutomationLogger = nativeAutomationLogger;
const requestPipelineLogger = nativeAutomationLogger.extend('request-pipeline');
exports.requestPipelineLogger = requestPipelineLogger;
const requestPipelineContextLogger = requestPipelineLogger.extend('context');
exports.requestPipelineContextLogger = requestPipelineContextLogger;
const requestPipelineMockLogger = requestPipelineLogger.extend('mock');
exports.requestPipelineMockLogger = requestPipelineMockLogger;
const requestPipelineInternalRequestLogger = requestPipelineLogger.extend('internal-request');
exports.requestPipelineInternalRequestLogger = requestPipelineInternalRequestLogger;
const requestPipelineServiceRequestLogger = requestPipelineLogger.extend('service-request');
exports.requestPipelineServiceRequestLogger = requestPipelineServiceRequestLogger;
const requestPipelineOtherRequestLogger = requestPipelineLogger.extend('other-request');
exports.requestPipelineOtherRequestLogger = requestPipelineOtherRequestLogger;
const resourceInjectorLogger = nativeAutomationLogger.extend('resource-injector');
exports.resourceInjectorLogger = resourceInjectorLogger;
const requestHooksLogger = nativeAutomationLogger.extend('request-hooks');
const requestHooksEventProviderLogger = requestHooksLogger.extend('event-provider');
exports.requestHooksEventProviderLogger = requestHooksEventProviderLogger;
const browserLogger = testcafeLogger.extend('browser');
const browserProviderLogger = browserLogger.extend('provider');
const chromeBrowserProviderLogger = browserProviderLogger.extend('chrome');
exports.chromeBrowserProviderLogger = chromeBrowserProviderLogger;
const runnerLogger = testcafeLogger.extend('runner');
const testRunControllerLogger = runnerLogger.extend('test-run-controller');
exports.testRunControllerLogger = testRunControllerLogger;
const reporterLogger = testcafeLogger.extend('reporter');
exports.reporterLogger = reporterLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWJ1Zy1sb2dnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFBLGVBQUssRUFBQyxVQUFVLENBQUMsQ0FBQztBQUV6QyxNQUFNLHNCQUFzQixHQUFpQixjQUFjLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFzQnBGLHdEQUFzQjtBQXJCMUIsTUFBTSxxQkFBcUIsR0FBa0Isc0JBQXNCLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFzQjNGLHNEQUFxQjtBQXJCekIsTUFBTSw0QkFBNEIsR0FBVyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUE2QmpGLG9FQUE0QjtBQTVCaEMsTUFBTSx5QkFBeUIsR0FBYyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUF3QjlFLDhEQUF5QjtBQXZCN0IsTUFBTSxvQ0FBb0MsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQXdCMUYsb0ZBQW9DO0FBdkJ4QyxNQUFNLG1DQUFtQyxHQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBd0J6RixrRkFBbUM7QUF2QnZDLE1BQU0saUNBQWlDLEdBQU0scUJBQXFCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBd0J2Riw4RUFBaUM7QUF2QnJDLE1BQU0sc0JBQXNCLEdBQWlCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBaUI1Rix3REFBc0I7QUFoQjFCLE1BQU0sa0JBQWtCLEdBQXFCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1RixNQUFNLCtCQUErQixHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBaUJyRiwwRUFBK0I7QUFmbkMsTUFBTSxhQUFhLEdBQWlCLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckUsTUFBTSxxQkFBcUIsR0FBUyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sMkJBQTJCLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBWXZFLGtFQUEyQjtBQVYvQixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXJELE1BQU0sdUJBQXVCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBZXZFLDBEQUF1QjtBQWIzQixNQUFNLGNBQWMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBY3JELHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgdGVzdGNhZmVMb2dnZXIgPSBkZWJ1ZygndGVzdGNhZmUnKTtcblxuY29uc3QgbmF0aXZlQXV0b21hdGlvbkxvZ2dlciAgICAgICAgICAgICAgID0gdGVzdGNhZmVMb2dnZXIuZXh0ZW5kKCduYXRpdmUtYXV0b21hdGlvbicpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyICAgICAgICAgICAgICAgID0gbmF0aXZlQXV0b21hdGlvbkxvZ2dlci5leHRlbmQoJ3JlcXVlc3QtcGlwZWxpbmUnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZUNvbnRleHRMb2dnZXIgICAgICAgICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ2NvbnRleHQnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZU1vY2tMb2dnZXIgICAgICAgICAgICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ21vY2snKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZUludGVybmFsUmVxdWVzdExvZ2dlciA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ2ludGVybmFsLXJlcXVlc3QnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZVNlcnZpY2VSZXF1ZXN0TG9nZ2VyICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ3NlcnZpY2UtcmVxdWVzdCcpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lT3RoZXJSZXF1ZXN0TG9nZ2VyICAgID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnb3RoZXItcmVxdWVzdCcpO1xuY29uc3QgcmVzb3VyY2VJbmplY3RvckxvZ2dlciAgICAgICAgICAgICAgID0gbmF0aXZlQXV0b21hdGlvbkxvZ2dlci5leHRlbmQoJ3Jlc291cmNlLWluamVjdG9yJyk7XG5jb25zdCByZXF1ZXN0SG9va3NMb2dnZXIgICAgICAgICAgICAgICAgICAgPSBuYXRpdmVBdXRvbWF0aW9uTG9nZ2VyLmV4dGVuZCgncmVxdWVzdC1ob29rcycpO1xuY29uc3QgcmVxdWVzdEhvb2tzRXZlbnRQcm92aWRlckxvZ2dlciAgICAgID0gcmVxdWVzdEhvb2tzTG9nZ2VyLmV4dGVuZCgnZXZlbnQtcHJvdmlkZXInKTtcblxuY29uc3QgYnJvd3NlckxvZ2dlciAgICAgICAgICAgICAgID0gdGVzdGNhZmVMb2dnZXIuZXh0ZW5kKCdicm93c2VyJyk7XG5jb25zdCBicm93c2VyUHJvdmlkZXJMb2dnZXIgICAgICAgPSBicm93c2VyTG9nZ2VyLmV4dGVuZCgncHJvdmlkZXInKTtcbmNvbnN0IGNocm9tZUJyb3dzZXJQcm92aWRlckxvZ2dlciA9IGJyb3dzZXJQcm92aWRlckxvZ2dlci5leHRlbmQoJ2Nocm9tZScpO1xuXG5jb25zdCBydW5uZXJMb2dnZXIgPSB0ZXN0Y2FmZUxvZ2dlci5leHRlbmQoJ3J1bm5lcicpO1xuXG5jb25zdCB0ZXN0UnVuQ29udHJvbGxlckxvZ2dlciA9IHJ1bm5lckxvZ2dlci5leHRlbmQoJ3Rlc3QtcnVuLWNvbnRyb2xsZXInKTtcblxuY29uc3QgcmVwb3J0ZXJMb2dnZXIgPSB0ZXN0Y2FmZUxvZ2dlci5leHRlbmQoJ3JlcG9ydGVyJyk7XG5cbmV4cG9ydCB7XG4gICAgbmF0aXZlQXV0b21hdGlvbkxvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVMb2dnZXIsXG4gICAgcmVzb3VyY2VJbmplY3RvckxvZ2dlcixcbiAgICBjaHJvbWVCcm93c2VyUHJvdmlkZXJMb2dnZXIsXG4gICAgcmVxdWVzdEhvb2tzRXZlbnRQcm92aWRlckxvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVNb2NrTG9nZ2VyLFxuICAgIHJlcXVlc3RQaXBlbGluZUludGVybmFsUmVxdWVzdExvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVPdGhlclJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lQ29udGV4dExvZ2dlcixcbiAgICB0ZXN0UnVuQ29udHJvbGxlckxvZ2dlcixcbiAgICByZXBvcnRlckxvZ2dlcixcbn07XG4iXX0=