"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const embedding_utils_1 = __importDefault(require("./embedding-utils"));
const exportable_lib_1 = __importDefault(require("./api/exportable-lib"));
const testcafe_configuration_1 = __importDefault(require("./configuration/testcafe-configuration"));
const option_names_1 = __importDefault(require("./configuration/option-names"));
const user_variables_1 = __importDefault(require("./api/user-variables"));
const utils_1 = require("./configuration/utils");
const lazyRequire = require('import-lazy')(require);
const TestCafe = lazyRequire('./testcafe');
const setupExitHook = lazyRequire('async-exit-hook');
// API
async function getConfiguration(args) {
    var _a;
    let configuration;
    if (args.length === 1 && typeof args[0] === 'object') {
        configuration = new testcafe_configuration_1.default((_a = args[0]) === null || _a === void 0 ? void 0 : _a.configFile);
        await configuration.init(args[0]);
    }
    else {
        // NOTE: Positional arguments support is left only for backward compatibility.
        // It should be removed in future TestCafe versions.
        // All new APIs should be enabled through the configuration object in the upper clause.
        // Please do not add new APIs here.
        const [hostname, port1, port2, ssl, developmentMode, retryTestPages, cache, configFile] = args;
        configuration = new testcafe_configuration_1.default(configFile);
        await configuration.init({
            hostname,
            port1,
            port2,
            ssl,
            developmentMode,
            retryTestPages,
            cache,
        });
    }
    return configuration;
}
// API
async function createTestCafe(...args) {
    const configuration = await getConfiguration(args);
    const [port1, port2] = await Promise.all([
        (0, utils_1.getValidPort)(configuration.getOption(option_names_1.default.port1)),
        (0, utils_1.getValidPort)(configuration.getOption(option_names_1.default.port2)),
    ]);
    const userVariablesOption = configuration.getOption(option_names_1.default.userVariables);
    if (userVariablesOption)
        user_variables_1.default.value = userVariablesOption;
    configuration.mergeOptions({ port1, port2 });
    const testcafe = new TestCafe(configuration);
    setupExitHook(cb => testcafe.close().then(cb));
    return testcafe;
}
// Embedding utils
createTestCafe.embeddingUtils = embedding_utils_1.default;
// Common API
Object.keys(exportable_lib_1.default).forEach(key => {
    Object.defineProperty(createTestCafe, key, { get: () => exportable_lib_1.default[key] });
});
exports.default = createTestCafe;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBK0M7QUFDL0MsMEVBQWlEO0FBQ2pELG9HQUEyRTtBQUMzRSxnRkFBd0Q7QUFDeEQsMEVBQWlEO0FBQ2pELGlEQUFxRDtBQUVyRCxNQUFNLFdBQVcsR0FBSyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEQsTUFBTSxRQUFRLEdBQVEsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2hELE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXJELE1BQU07QUFDTixLQUFLLFVBQVUsZ0JBQWdCLENBQUUsSUFBSTs7SUFDakMsSUFBSSxhQUFhLENBQUM7SUFFbEIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDbEQsYUFBYSxHQUFHLElBQUksZ0NBQXFCLENBQUMsTUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLDBDQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQztTQUNJO1FBQ0QsOEVBQThFO1FBQzlFLG9EQUFvRDtRQUNwRCx1RkFBdUY7UUFDdkYsbUNBQW1DO1FBQ25DLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRS9GLGFBQWEsR0FBRyxJQUFJLGdDQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQztZQUNyQixRQUFRO1lBQ1IsS0FBSztZQUNMLEtBQUs7WUFDTCxHQUFHO1lBQ0gsZUFBZTtZQUNmLGNBQWM7WUFDZCxLQUFLO1NBQ1IsQ0FBQyxDQUFDO0tBQ047SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTTtBQUNOLEtBQUssVUFBVSxjQUFjLENBQUUsR0FBRyxJQUFJO0lBQ2xDLE1BQU0sYUFBYSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbkQsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDckMsSUFBQSxvQkFBWSxFQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsc0JBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxJQUFBLG9CQUFZLEVBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxzQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVELENBQUMsQ0FBQztJQUVILE1BQU0sbUJBQW1CLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxzQkFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWhGLElBQUksbUJBQW1CO1FBQ25CLHdCQUFhLENBQUMsS0FBSyxHQUFHLG1CQUFtQixDQUFDO0lBRTlDLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUU3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUU3QyxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFL0MsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVELGtCQUFrQjtBQUNsQixjQUFjLENBQUMsY0FBYyxHQUFHLHlCQUFjLENBQUM7QUFFL0MsYUFBYTtBQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNyQyxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsd0JBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW1iZWRkaW5nVXRpbHMgZnJvbSAnLi9lbWJlZGRpbmctdXRpbHMnO1xuaW1wb3J0IGV4cG9ydGFibGVMaWIgZnJvbSAnLi9hcGkvZXhwb3J0YWJsZS1saWInO1xuaW1wb3J0IFRlc3RDYWZlQ29uZmlndXJhdGlvbiBmcm9tICcuL2NvbmZpZ3VyYXRpb24vdGVzdGNhZmUtY29uZmlndXJhdGlvbic7XG5pbXBvcnQgT1BUSU9OX05BTUVTIGZyb20gJy4vY29uZmlndXJhdGlvbi9vcHRpb24tbmFtZXMnO1xuaW1wb3J0IHVzZXJWYXJpYWJsZXMgZnJvbSAnLi9hcGkvdXNlci12YXJpYWJsZXMnO1xuaW1wb3J0IHsgZ2V0VmFsaWRQb3J0IH0gZnJvbSAnLi9jb25maWd1cmF0aW9uL3V0aWxzJztcblxuY29uc3QgbGF6eVJlcXVpcmUgICA9IHJlcXVpcmUoJ2ltcG9ydC1sYXp5JykocmVxdWlyZSk7XG5jb25zdCBUZXN0Q2FmZSAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdGNhZmUnKTtcbmNvbnN0IHNldHVwRXhpdEhvb2sgPSBsYXp5UmVxdWlyZSgnYXN5bmMtZXhpdC1ob29rJyk7XG5cbi8vIEFQSVxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbiAoYXJncykge1xuICAgIGxldCBjb25maWd1cmF0aW9uO1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWd1cmF0aW9uID0gbmV3IFRlc3RDYWZlQ29uZmlndXJhdGlvbihhcmdzWzBdPy5jb25maWdGaWxlKTtcblxuICAgICAgICBhd2FpdCBjb25maWd1cmF0aW9uLmluaXQoYXJnc1swXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBOT1RFOiBQb3NpdGlvbmFsIGFyZ3VtZW50cyBzdXBwb3J0IGlzIGxlZnQgb25seSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgLy8gSXQgc2hvdWxkIGJlIHJlbW92ZWQgaW4gZnV0dXJlIFRlc3RDYWZlIHZlcnNpb25zLlxuICAgICAgICAvLyBBbGwgbmV3IEFQSXMgc2hvdWxkIGJlIGVuYWJsZWQgdGhyb3VnaCB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgaW4gdGhlIHVwcGVyIGNsYXVzZS5cbiAgICAgICAgLy8gUGxlYXNlIGRvIG5vdCBhZGQgbmV3IEFQSXMgaGVyZS5cbiAgICAgICAgY29uc3QgW2hvc3RuYW1lLCBwb3J0MSwgcG9ydDIsIHNzbCwgZGV2ZWxvcG1lbnRNb2RlLCByZXRyeVRlc3RQYWdlcywgY2FjaGUsIGNvbmZpZ0ZpbGVdID0gYXJncztcblxuICAgICAgICBjb25maWd1cmF0aW9uID0gbmV3IFRlc3RDYWZlQ29uZmlndXJhdGlvbihjb25maWdGaWxlKTtcblxuICAgICAgICBhd2FpdCBjb25maWd1cmF0aW9uLmluaXQoe1xuICAgICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgICBwb3J0MSxcbiAgICAgICAgICAgIHBvcnQyLFxuICAgICAgICAgICAgc3NsLFxuICAgICAgICAgICAgZGV2ZWxvcG1lbnRNb2RlLFxuICAgICAgICAgICAgcmV0cnlUZXN0UGFnZXMsXG4gICAgICAgICAgICBjYWNoZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ3VyYXRpb247XG59XG5cbi8vIEFQSVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVzdENhZmUgKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjb25maWd1cmF0aW9uID0gYXdhaXQgZ2V0Q29uZmlndXJhdGlvbihhcmdzKTtcblxuICAgIGNvbnN0IFtwb3J0MSwgcG9ydDJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRWYWxpZFBvcnQoY29uZmlndXJhdGlvbi5nZXRPcHRpb24oT1BUSU9OX05BTUVTLnBvcnQxKSksXG4gICAgICAgIGdldFZhbGlkUG9ydChjb25maWd1cmF0aW9uLmdldE9wdGlvbihPUFRJT05fTkFNRVMucG9ydDIpKSxcbiAgICBdKTtcblxuICAgIGNvbnN0IHVzZXJWYXJpYWJsZXNPcHRpb24gPSBjb25maWd1cmF0aW9uLmdldE9wdGlvbihPUFRJT05fTkFNRVMudXNlclZhcmlhYmxlcyk7XG5cbiAgICBpZiAodXNlclZhcmlhYmxlc09wdGlvbilcbiAgICAgICAgdXNlclZhcmlhYmxlcy52YWx1ZSA9IHVzZXJWYXJpYWJsZXNPcHRpb247XG5cbiAgICBjb25maWd1cmF0aW9uLm1lcmdlT3B0aW9ucyh7IHBvcnQxLCBwb3J0MiB9KTtcblxuICAgIGNvbnN0IHRlc3RjYWZlID0gbmV3IFRlc3RDYWZlKGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgc2V0dXBFeGl0SG9vayhjYiA9PiB0ZXN0Y2FmZS5jbG9zZSgpLnRoZW4oY2IpKTtcblxuICAgIHJldHVybiB0ZXN0Y2FmZTtcbn1cblxuLy8gRW1iZWRkaW5nIHV0aWxzXG5jcmVhdGVUZXN0Q2FmZS5lbWJlZGRpbmdVdGlscyA9IGVtYmVkZGluZ1V0aWxzO1xuXG4vLyBDb21tb24gQVBJXG5PYmplY3Qua2V5cyhleHBvcnRhYmxlTGliKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZVRlc3RDYWZlLCBrZXksIHsgZ2V0OiAoKSA9PiBleHBvcnRhYmxlTGliW2tleV0gfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGVzdENhZmU7XG4iXX0=